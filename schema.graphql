"""
The AWSDate scalar type represents a valid extended ISO 8601 Date string.
For example, 1970-01-01Z, 1970-01-01-07:00 and 1970-01-01+05:30
"""
scalar AWSDate
"""
The AWSTime scalar type represents a valid extended ISO 8601 Time.
For example, 12:30Z, 12:30:24-07:00 and 12:30:24.500+05:30
"""
scalar AWSTime
"""
The AWSDateTime scalar type represents a valid extended ISO 8601 DateTime string.
Datetime strings of the form YYYY-MM-DDThh:mm:ss.sssZ
"""
scalar AWSDateTime
"""
The AWSTimestamp scalar type represents the number of seconds that have
elapsed since 1970-01-01T00:00Z. Timestamps are serialized and deserialized as numbers.
"""
scalar AWSTimestamp
scalar AWSEmail
scalar AWSURL
scalar AWSPhone

schema {
  query: Query
  mutation: Mutation
}

type Country @aws_api_key @aws_cognito_user_pools {
  code: ID!
  name: String
  native: String
  phone: String
}

type Language @aws_api_key @aws_cognito_user_pools {
  code: ID!
  name: String
  native: String
}

input SigninMobileInput {
  deviceId: String
}

input SignoutMobileInput {
  deviceId: String
}

input UpdateUserInput {
  firstName: String
  lastName: String
  country: String
  photo: String
  phone: String
  phoneCountry: String
  birthDate: AWSDate
  birthCountry: String
  birthCity: String
  gender: Gender
  usCitizen: Boolean
}

input InviteParentInput {
  email: String!
}

input CreateEventInput {
  title: String!
  description: String
  photo: String
  startDate: AWSDateTime
  endDate: AWSDateTime
  address: String
  discipline: String
  price: Float!
  target: EventTargetInput!
}

input UpdateEventInput {
  id: ID!
  title: String!
  description: String
  photo: String
  startDate: AWSDateTime!
  endDate: AWSDateTime
  address: String
  discipline: String
  price: Float!
  target: EventTargetInput
}

input CreatePostInput {
  title: String!
  description: String
  photo: String
  attachment: String
  target: EventTargetInput!
}

input UpdatePostInput {
  id: ID!
  title: String
  description: String
  photo: String
  attachment: String
  target: EventTargetInput
}

input Contact {
  fullName: String
  phoneNumber: String
  email: String
}

input FeedFilterInput {
  eventType: EventType
}

type SigninMobilePayload {
  errors: [String]
}

type SignoutMobilePayload {
  errors: [String]
}

type UpdateUserPayload {
  errors: [String]
  user: User
}

type InviteParentPayload {
  errors: [String]
}

type CreateEventPayload {
  errors: [String]
  event: EventForAdmin
}

type UpdateEventPayload {
  errors: [String]
  event: EventForAdmin
}

type CreatePostPayload {
  errors: [String]
  post: PostForAdmin
}

type UpdatePostPayload {
  errors: [String]
  post: PostForAdmin
}

enum Gender {
  M
  F
}

enum UserRole {
  Coach
  Adult
  Parent
  Teenager
  Fan
}

enum EventType {
  Event
  Post
}

type Image {
  url: String
}

type File {
  url: String
}

type ContactUser {
  email: String
  exist: Boolean
}

type User {
  firstName: String
  lastName: String
  country: String
  photo: Image
  phone: String
  phoneCountry: String
  birthDate: AWSDate
  birthCountry: String
  birthCity: String
  gender: Gender
  usCitizen: Boolean
}

type EventForAdmin {
  id: ID!
  title: String
  description: String
  photo: Image
  startDate: AWSDateTime
  endDate: AWSDateTime
  address: String
  discipline: String
  price: Float
  likesCount: Int
  viewsCount: Int
  target: EventTarget
}

type Event {
  id: ID!
  title: String
  description: String
  photo: Image
  startDate: AWSDateTime
  endDate: AWSDateTime
  address: String
  discipline: String
  price: Float
  likesCount: Int
  viewsCount: Int
}

type PostForAdmin {
  id: ID!
  title: String
  description: String
  photo: Image
  attachment: File
  likesCount: Int
  viewsCount: Int
  target: EventTarget
}

type Post {
  id: ID!
  title: String
  description: String
  photo: Image
  attachment: File
  likesCount: Int
  viewsCount: Int
}

type EventTarget {
  country: String
  federation: [FederationEventTarget]
  club: [ClubEventTarget]
  discipline: [String]
  team: [TeamEventTarget]
  userRole: [UserRole]
}

input EventTargetInput {
  country: String
  federation: [String]
  club: [String]
  discipline: [String]
  team: [String]
  userRole: [UserRole]
}

type FederationEventTarget {
  id: ID!
  name: String
}

type ClubEventTarget {
  id: ID!
  name: String
}

type TeamEventTarget {
  id: ID!
  name: String
}

type FeedConnection {
  items: [FeedItem]
}

union FeedItem = Event | Post

type Mutation {
  signinMobile(input: SigninMobileInput!): SigninMobilePayload
  signoutMobile(input: SignoutMobileInput!): SignoutMobilePayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload!
  inviteParent(input: InviteParentInput!): InviteParentPayload!
  createEvent(input: CreateEventInput!): CreateEventPayload!
  updateEvent(input: UpdateEventInput!): UpdateEventPayload!
  createPost(input: CreatePostInput!): CreatePostPayload!
  updatePost(input: UpdatePostInput!): UpdatePostPayload!
  syncContacts(contacts: [Contact]!): [ContactUser]!
}

type Query {
  countries: [Country!] @aws_api_key @aws_cognito_user_pools
  languages: [Language!] @aws_api_key @aws_cognito_user_pools
  """
  Get direct link to upload user files
  """
  uploadUrl(type: String!, fileName: String!): String

  """
  Get current logged user
  """
  me: User!

  """
  Lookup an Event by the id as Admin
  """
  getEventAsAdmin(id: ID!): EventForAdmin

  """
  Lookup an Event by the id
  """
  getEvent(id: ID!): Event
  
  """
  Lookup a Post by the id as Admin
  """
  getPostAsAdmin(id: ID!): PostForAdmin
  
  """
  Lookup a Post by the id
  """
  getPost(id: ID!): Post

  """
  Search Events and Posts relevant to the user
  """
  feed(filter: FeedFilterInput, limit: Int, after: String): FeedConnection
}
