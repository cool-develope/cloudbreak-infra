"""
The AWSDate scalar type represents a valid extended ISO 8601 Date string.
For example, 1970-01-01Z, 1970-01-01-07:00 and 1970-01-01+05:30
"""
scalar AWSDate
"""
The AWSTime scalar type represents a valid extended ISO 8601 Time.
For example, 12:30Z, 12:30:24-07:00 and 12:30:24.500+05:30
"""
scalar AWSTime
"""
The AWSDateTime scalar type represents a valid extended ISO 8601 DateTime string.
Datetime strings of the form YYYY-MM-DDThh:mm:ss.sssZ
"""
scalar AWSDateTime
"""
The AWSTimestamp scalar type represents the number of seconds that have
elapsed since 1970-01-01T00:00Z. Timestamps are serialized and deserialized as numbers.
"""
scalar AWSTimestamp
scalar AWSEmail
scalar AWSURL
scalar AWSPhone

schema {
  query: Query
  mutation: Mutation
}

type Country @aws_api_key @aws_cognito_user_pools {
  code: ID!
  name: String
  native: String
  phone: String
}

type Language @aws_api_key @aws_cognito_user_pools {
  code: ID!
  name: String
  native: String
}

input SigninMobileInput {
  deviceId: String
}

input SignoutMobileInput {
  deviceId: String
}

input UpdateUserInput {
  firstName: String
  lastName: String
  country: String
  photo: String
  phone: String
  phoneCountry: String
  birthDate: AWSDate
  birthCountry: String
  birthCity: String
  gender: Gender
  usCitizen: Boolean
}

input InviteParentInput {
  email: String!
}

input AcceptChildInvitationInput {
  invitationId: ID!
}

input DeclineChildInvitationInput {
  invitationId: ID!
}

input CreateEventInput {
  title: String!
  description: String
  image: String
  startDate: AWSDateTime!
  endDate: AWSDateTime!
  address: String
  discipline: Discipline
  price: Float!
  repeatType: RepeatType
  target: EventTargetInput!
}

input UpdateEventInput {
  id: ID!
  title: String!
  description: String
  image: String
  startDate: AWSDateTime!
  endDate: AWSDateTime
  address: String
  discipline: Discipline
  price: Float!
  target: EventTargetInput
}

input CreatePostInput {
  title: String!
  description: String
  image: String
  attachment: [String]
  target: EventTargetInput!
}

input UpdatePostInput {
  id: ID!
  title: String
  description: String
  image: String
  attachment: String
  target: EventTargetInput
}

input PhoneContact {
  fullName: String!
  photo: String
  email: [String]!
}

input FeedFilterInput {
  eventType: EventType
}

input MyEventsFilterInput {
  startDateAfter: AWSDateTime
  startDateBefore: AWSDateTime
  endDateAfter: AWSDateTime
  endDateBefore: AWSDateTime
}

input FeedPrivateFilterInput {
  search: String
  myContent: Boolean
  eventType: [EventType]
  federation: [String]
  club: [String]
  team: [String]
  discipline: [Discipline]
  createDateAfter: AWSDateTime
  createDateBefore: AWSDateTime
  startDateAfter: AWSDateTime
  startDateBefore: AWSDateTime
  endDateAfter: AWSDateTime
  endDateBefore: AWSDateTime
}

input TeamsPrivateFilterInput {
  search: String
}

input ClubsPrivateFilterInput {
  search: String
}

input FederationsPrivateFilterInput {
  search: String
}

input AddLikeInput {
  eventId: ID!
}

input RemoveLikeInput {
  eventId: ID!
}

input AcceptEventInput {
  eventId: ID!
}

input DeclineEventInput {
  eventId: ID!
}

type SigninMobilePayload {
  errors: [String]
}

type SignoutMobilePayload {
  errors: [String]
}

type UpdateUserPayload {
  errors: [String]
  user: User
}

type InviteParentPayload {
  errors: [String]
}

type AcceptChildInvitationPayload {
  errors: [String]
}

type DeclineChildInvitationPayload {
  errors: [String]
}

type CreateEventPayload {
  errors: [String]
  event: Event
}

type UpdateEventPayload {
  errors: [String]
  event: Event
}

type CreatePostPayload {
  errors: [String]
  post: Post
}

type UpdatePostPayload {
  errors: [String]
  post: Post
}

type UploadUrlPayload {
  uploadUrl: String
  key: String
}

type AddLikePayload {
  eventId: ID!
}

type RemoveLikePayload {
  eventId: ID!
}

type AcceptEventPayload {
  eventId: ID!
}

type DeclineEventPayload {
  eventId: ID!
}

enum Gender {
  M
  F
}

enum UserRole {
  Coach
  Adult
  Parent
  Teenager
  Fan
}

enum Discipline {
  SOCCER
  TENNIS
  PADEL
  BASKETBALL
  VOLLEYBALL
  ATHLETICS
  ROWING
  BADMINTON
  BOXING
  CANOE_KAYAK
  CYCLING
  GOLF
  GYMNASTIC
  HANDBALL
  JUDO
  SWIMMING
  RUGBY
  EQUESTRIAN
  TAEKWONDO
  TABLE_TENNIS
}

enum EventType {
  Event
  Post
}

enum UploadType {
  UserPhoto
  EventImage
  PostImage
  PostAttachment
}

enum RepeatType {
  None
  Weekly
  Monthly
}

type Image {
  url: String
}

type File {
  url: String
  size: Int
}

type Contact {
  fullName: String!
  photo: String
  email: String!
}

type User {
  email: String
  firstName: String
  lastName: String
  country: String
  photo: Image
  phone: String
  phoneCountry: String
  birthDate: AWSDate
  birthCountry: String
  birthCity: String
  gender: Gender
  usCitizen: Boolean
  children: [UserChild]
  parent: UserChild
  pendingChildInvitations: [ChildInvitation]
}

type UserPublic {
  firstName: String
  lastName: String
  photo: Image
}

type UserChild {
  firstName: String
  lastName: String
  photo: Image
}

type ChildInvitation {
  invitationId: ID!
  createDate: AWSDateTime
  user: UserChild
}

type Event {
  id: ID!
  title: String
  description: String
  image: Image
  startDate: AWSDateTime
  endDate: AWSDateTime
  address: String
  discipline: String
  price: Float
  likesCount: Int
  viewsCount: Int
  acceptedCount: Int
  author: Author
  repeatType: String
  target: EventTarget
  myReaction: EventReaction
  participants: UserConnection!
}

type Post {
  id: ID!
  title: String
  description: String
  image: Image
  attachment: [File]
  likesCount: Int
  viewsCount: Int
  author: Author
  target: EventTarget
  myReaction: PostReaction
}

type PostReaction {
  liked: Boolean
}

type EventReaction {
  liked: Boolean
  accepted: Boolean
}

type Author {
  firstName: String
  lastName: String
  organizationName: String
  photo: Image
}

type TeamItemPrivate {
  id: ID!
  name: String
}

type ClubItemPrivate {
  id: ID!
  name: String
  logo: Image
}

type FederationItemPrivate {
  id: ID!
  name: String
  logo: Image
}

type EventTarget {
  country: String
  federation: [FederationEventTarget]
  club: [ClubEventTarget]
  discipline: [Discipline]
  team: [TeamEventTarget]
  userRole: [UserRole]
}

input EventTargetInput {
  country: String
  federation: [String]
  club: [String]
  discipline: [Discipline]
  team: [String]
  userRole: [UserRole]
}

type FederationEventTarget {
  id: ID!
  name: String
}

type ClubEventTarget {
  id: ID!
  name: String
}

type TeamEventTarget {
  id: ID!
  name: String
}

type MyEventsConnection {
  items: [Event]
  totalCount: Int
}

type UpcomingEventsPrivateConnection {
  items: [Event]
}

type FeedConnection {
  items: [FeedItem]
  totalCount: Int
}

type FeedPrivateConnection {
  items: [FeedItem]
  totalCount: Int
}

type TeamsPrivateConnection {
  items: [TeamItemPrivate]
}

type ClubsPrivateConnection {
  items: [ClubItemPrivate]
}

type FederationsPrivateConnection {
  items: [FederationItemPrivate]
}

type UserConnection {
  items: [UserPublic]
}

union FeedItem = Event | Post

type Mutation {
  signinMobile(input: SigninMobileInput!): SigninMobilePayload
  signoutMobile(input: SignoutMobileInput!): SignoutMobilePayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload!

  inviteParent(input: InviteParentInput!): InviteParentPayload
  acceptChildInvitation(input: AcceptChildInvitationInput!): AcceptChildInvitationPayload
  declineChildInvitation(input: DeclineChildInvitationInput!): DeclineChildInvitationPayload

  createEvent(input: CreateEventInput!): CreateEventPayload!

  """
  TODO:
  """
  updateEvent(input: UpdateEventInput!): UpdateEventPayload!
  createPost(input: CreatePostInput!): CreatePostPayload!

  """
  TODO:
  """
  updatePost(input: UpdatePostInput!): UpdatePostPayload!

  addLike(input: AddLikeInput!): AddLikePayload
  removeLike(input: RemoveLikeInput!): RemoveLikePayload
  acceptEvent(input: AcceptEventInput!): AcceptEventPayload
  declineEvent(input: DeclineEventInput!): DeclineEventPayload

  """
  Synchronize contacts from phone to Tifo
  """
  syncContacts(contacts: [PhoneContact]!): [Contact]!
}

type Query {
  countries: [Country!] @aws_api_key @aws_cognito_user_pools
  languages: [Language!] @aws_api_key @aws_cognito_user_pools
  """
  Get direct link to upload user files
  """
  uploadUrl(type: UploadType!, fileName: String!): UploadUrlPayload!

  """
  Get current logged user
  """
  me: User!

  """
  Private. Lookup an Event by the id
  """
  eventPrivate(eventId: ID!): Event

  """
  Lookup an Event by the id
  """
  event(eventId: ID!): Event

  """
  Private. Lookup a Post by the id
  """
  postPrivate(eventId: ID!): Post

  """
  Lookup a Post by the id
  """
  post(eventId: ID!): Post

  """
  Search Events and Posts relevant to the user
  """
  feed(filter: FeedFilterInput, limit: Int, from: Int): FeedConnection!

  """
  Lookup an Events accepted by user
  """
  myEvents(filter: MyEventsFilterInput, limit: Int, from: Int): MyEventsConnection!

  """
  Private. List upcoming Events from my organization
  """
  upcomingEventsPrivate(limit: Int): UpcomingEventsPrivateConnection!

  """
  Private. Search Events and Posts by filter
  """
  feedPrivate(filter: FeedPrivateFilterInput, limit: Int, from: Int): FeedPrivateConnection!

  """
  Lookup a user contacts
  """
  contacts: [Contact]!

  teamsPrivate(filter: TeamsPrivateFilterInput, limit: Int, from: Int): TeamsPrivateConnection!
  clubsPrivate(filter: ClubsPrivateFilterInput, limit: Int, from: Int): ClubsPrivateConnection!
  federationsPrivate(
    filter: FederationsPrivateFilterInput
    limit: Int
    from: Int
  ): FederationsPrivateConnection!
}
