"""
The AWSDate scalar type represents a valid extended ISO 8601 Date string.
For example, 1970-01-01Z, 1970-01-01-07:00 and 1970-01-01+05:30
"""
scalar AWSDate
"""
The AWSTime scalar type represents a valid extended ISO 8601 Time.
For example, 12:30Z, 12:30:24-07:00 and 12:30:24.500+05:30
"""
scalar AWSTime
"""
The AWSDateTime scalar type represents a valid extended ISO 8601 DateTime string.
Datetime strings of the form YYYY-MM-DDThh:mm:ss.sssZ
"""
scalar AWSDateTime
"""
The AWSTimestamp scalar type represents the number of seconds that have
elapsed since 1970-01-01T00:00Z. Timestamps are serialized and deserialized as numbers.
"""
scalar AWSTimestamp
scalar AWSEmail
scalar AWSURL
scalar AWSPhone

schema {
  query: Query
  mutation: Mutation
}

type Country @aws_api_key @aws_cognito_user_pools {
  code: ID!
  name: String
  native: String
  phone: String
}

type Language @aws_api_key @aws_cognito_user_pools {
  code: ID!
  name: String
  native: String
}

input SigninMobileInput {
  deviceId: String
}

input SignoutMobileInput {
  deviceId: String
}

input UpdateUserInput {
  firstName: String
  lastName: String
  country: String
  photo: String
  selfie: String
  birthDate: AWSDate
  birthCountry: String
  birthCity: String
  gender: Gender
  usCitizen: Boolean
  city: String
  postcode: String
  address1: String
  address2: String
  language: String
}

input InviteParentInput {
  email: String!
}

input AcceptChildInvitationInput {
  invitationId: ID!
}

input DeclineChildInvitationInput {
  invitationId: ID!
}

input CreateEventInput {
  clubId: String
  federationId: String
  title: String!
  description: String
  image: String
  startDate: AWSDateTime!
  endDate: AWSDateTime!
  address: String
  discipline: [Discipline]
  price: Float!
  repeatType: RepeatType
  target: EventTargetInput!
}

input UpdateEventInput {
  id: ID!
  title: String
  description: String
  image: String
  startDate: AWSDateTime
  endDate: AWSDateTime
  address: String
  discipline: [Discipline]
  price: Float
  repeatType: RepeatType
  target: EventTargetInput
}

input CreatePostInput {
  clubId: String
  federationId: String
  title: String!
  description: String
  image: String
  attachment: [String]
  target: EventTargetInput!
}

input UpdatePostInput {
  id: ID!
  title: String
  description: String
  image: String
  attachment: [String]
  target: EventTargetInput
}

input PhoneContact {
  fullName: String!
  email: [String]!
}

input FeedFilterInput {
  eventType: EventType
  clubId: String
  teamId: String
}

input MyEventsFilterInput {
  startDateAfter: AWSDateTime
  startDateBefore: AWSDateTime
  endDateAfter: AWSDateTime
  endDateBefore: AWSDateTime
}

input FeedPrivateFilterInput {
  search: String
  myContent: Boolean
  eventType: [EventType]
  federation: [String]
  club: [String]
  team: [String]
  discipline: [Discipline]
  createDateAfter: AWSDateTime
  createDateBefore: AWSDateTime
  startDateAfter: AWSDateTime
  startDateBefore: AWSDateTime
  endDateAfter: AWSDateTime
  endDateBefore: AWSDateTime
}

input ClubsFilterInput {
  search: String
  city: String
  discipline: [Discipline]
  clubIds: [String]
}

input TeamsPrivateFilterInput {
  search: String
  discipline: [Discipline]
  clubIds: [String]
  parentTeamId: String
  isParent: Boolean
}

input UsersPrivateFilterInput {
  search: String
  userIds: [String]
  hasWallet: Boolean
  clubIds: [String]
  teamIds: [String]
  role: TeamMemberType
  status: TeamInvitationStatus
  createDateAfter: AWSDateTime
  createDateBefore: AWSDateTime
  birthDateAfter: AWSDateTime
  birthDateBefore: AWSDateTime
}

input MoneyRequestsFilterInput {
  status: MoneyRequestStatus
}

input TransactionsFilterInput {
  walletId: String
  dateFrom: AWSDateTime
  dateTo: AWSDateTime
}

input ClubsPrivateFilterInput {
  search: String
}

input FederationsPrivateFilterInput {
  search: String
  discipline: [Discipline]
}

input AddLikeInput {
  eventId: ID!
}

input RemoveLikeInput {
  eventId: ID!
}

input AcceptEventInput {
  eventId: ID!
}

input DeclineEventInput {
  eventId: ID!
}

input RejectMoneyRequestInput {
  requestId: ID!
}

input SendPhoneVerificationInput {
  phoneNumber: String!
}

input VerifyPhoneInput {
  phoneNumber: String!
  code: String!
}

input CreateTreezorUserInput {
  country: String!
  city: String!
  address1: String!
  state: String!
  postcode: String!
  birthCity: String!
  usCitizen: Boolean!
}

input SendMoneyRequestInput {
  email: String!
  amount: Float!
  note: String
}

input CreateClubPrivateInput {
  name: String!
  description: String
  cover: String
  logo: String
  code: String
  email: String
  phone: String
  country: String
  city: String
  address: String
  discipline: [Discipline]
}

input UpdateClubPrivateInput {
  id: ID!
  name: String!
  description: String
  cover: String
  logo: String
  code: String
  email: String
  phone: String
  country: String
  city: String
  address: String
  discipline: [Discipline]
}

input CreateTeamPrivateInput {
  clubId: String!
  name: String!
  description: String
  cover: String
  logo: String
  parentTeamId: String
  address: String
  email: String
  phone: String
  discipline: Discipline
  federations: [String]
}

input UpdateTeamPrivateInput {
  id: ID!
  clubId: String!
  name: String
  description: String
  cover: String
  logo: String
  parentTeamId: String
  address: String
  email: String
  phone: String
  discipline: Discipline
  federations: [String]
}

input CreateFederationPrivateInput {
  name: String!
  description: String
  cover: String
  logo: String
  email: String
  phone: String
  address: String
  discipline: [Discipline]!
  country: String!
  city: String
}

input UpdateFederationPrivateInput {
  id: ID!
  name: String
  description: String
  cover: String
  logo: String
  email: String
  phone: String
  address: String
  discipline: [Discipline]
  country: String
  city: String
}

input CreateCompanyPrivateInput {
  name: String!
  country: String
  legalForm: String
  legalSector: String
  regDate: AWSDate
  regNumber: String
  vatNumber: String
  goals: String
  address: AddressInput
  addressOffice: AddressInput
  representativeFiles: [String]
  owners: [CompanyOwnerInput]
}

input UpdateCompanyPrivateInput {
  name: String!
  country: String
  legalForm: String
  legalSector: String
  regDate: AWSDate
  regNumber: String
  vatNumber: String
  goals: String
  address: AddressInput
  addressOffice: AddressInput
  representativeFiles: [String]
  owners: [CompanyOwnerInput]
}

input AddressInput {
  city: String!
  postcode: String!
  address1: String!
  address2: String
}

input CompanyOwnerInput {
  firstName: String!
  lastName: String!
  email: String!
}

input UpdateUserPrivateInput {
  userId: String!
  firstName: String
  lastName: String
  photo: String
  birthDate: AWSDate
  gender: Gender
}

input SendTeamInvitationInput {
  clubId: String!
  teamId: String!
  role: TeamMemberType!
}

input AcceptTeamInvitationPrivateInput {
  userId: ID!
  clubId: String!
  teamId: String!
}

input DeclineTeamInvitationPrivateInput {
  userId: ID!
  clubId: String!
  teamId: String!
}

input ChangeTeamRolePrivateInput {
  userId: ID!
  clubId: String!
  teamId: String!
  role: TeamMemberType!
}

type SigninMobilePayload {
  errors: [String]
}

type SignoutMobilePayload {
  errors: [String]
}

type UpdateUserPayload {
  errors: [String]
  user: User
}

type InviteParentPayload {
  errors: [String]
}

type AcceptChildInvitationPayload {
  errors: [String]
}

type DeclineChildInvitationPayload {
  errors: [String]
}

type CreateEventPayload {
  errors: [String]
  event: Event
}

type UpdateEventPayload {
  errors: [String]
  event: Event
}

type CreatePostPayload {
  errors: [String]
  post: Post
}

type UpdatePostPayload {
  errors: [String]
  post: Post
}

type UploadUrlPayload {
  uploadUrl: String
  key: String
}

type AddLikePayload {
  eventId: ID!
}

type RemoveLikePayload {
  eventId: ID!
}

type AcceptEventPayload {
  errors: [String]
  eventId: ID!
}

type DeclineEventPayload {
  eventId: ID!
}

type SendPhoneVerificationPayload {
  errors: [String]
}

type VerifyPhonePayload {
  errors: [String]
  verified: Boolean
}

type CreateTreezorUserPayload {
  errors: [String]
  treezorUserId: Int
}

type CreateTreezorCompanyPayload {
  errors: [String]
  treezorUserId: Int
}

type SendMoneyRequestPayload {
  errors: [String]
}

type RejectMoneyRequestPayload {
  errors: [String]
}

type CreateClubPrivatePayload {
  errors: [String]
  club: Club
}

type UpdateClubPrivatePayload {
  errors: [String]
  club: Club
}

type CreateTeamPrivatePayload {
  errors: [String]
  team: Team
}

type UpdateTeamPrivatePayload {
  errors: [String]
  team: Team
}

type CreateCompanyPrivatePayload {
  errors: [String]
  company: Company
}

type UpdateCompanyPrivatePayload {
  errors: [String]
  company: Company
}

type SendTeamInvitationPayload {
  errors: [String]
}

type AcceptTeamInvitationPrivatePayload {
  errors: [String]
}

type DeclineTeamInvitationPrivatePayload {
  errors: [String]
}

type ChangeTeamRolePrivatePayload {
  errors: [String]
}

type CreateFederationPrivatePayload {
  errors: [String]
  federation: Federation
}

type UpdateFederationPrivatePayload {
  errors: [String]
  federation: Federation
}

enum Gender {
  M
  F
}

enum UserRole {
  Coach
  Adult
  Parent
  Teenager
  Fan
}

enum Discipline {
  """
  Deprecated
  """
  SOCCER
  FOOTBALL
  TENNIS
  PADEL
  BASKETBALL
  VOLLEYBALL
  ATHLETICS
  ROWING
  BADMINTON
  BOXING
  CANOE_KAYAK
  CYCLING
  GOLF
  GYMNASTIC
  HANDBALL
  JUDO
  SWIMMING
  RUGBY
  EQUESTRIAN
  TAEKWONDO
  TABLE_TENNIS
}

enum EventType {
  Event
  Post
}

enum UploadType {
  UserPhoto
  UserPrivatePhoto
  EventImage
  PostImage
  PostAttachment
  Club
  Team
  Federation
  Company
}

enum RepeatType {
  None
  Weekly
  Monthly
}

enum OrganizationType {
  """
  Deprecated
  """
  InternationalFederation
  Federation
  Club
}

enum OrganizationRole {
  Owner
  Coach
}

enum TeamMemberType {
  Member
  Coach
}

enum TeamInvitationStatus {
  Pending
  Accepted
  Declined
}

enum MoneyRequestStatus {
  Pending
  Paid
  Rejected
}

enum KycReview {
  NONE
  PENDING
  VALIDATED
  REFUSED
}

enum NotificationType {
  SendTeamInvitation
  DeclineTeamInvitation
  AcceptTeamInvitation
  SendMoneyRequest
  InviteParent
  AcceptChildInvitation
  DeclineChildInvitation
  KycReview
}

enum TransactionType {
  Payin
  Payout
  Transfer
}

type Image {
  url: String
}

type File {
  url: String
  key: String
  size: Int
}

type Contact {
  id: ID!
  fullName: String!
  photo: Image!
  email: String!
  treezor: TreezorUser!
}

type TreezorUser {
  userId: Int
  walletId: Int
}

type Organization {
  id: String
  name: String
  logo: Image
  type: OrganizationType
  role: OrganizationRole
}

type EventOrganization {
  id: String
  name: String
  type: OrganizationType
  walletId: Int
}

type User {
  id: ID!
  email: String
  firstName: String
  lastName: String
  country: String
  photo: Image
  phone: String
  phoneCountry: String
  birthDate: AWSDate
  birthCountry: String
  birthCity: String
  gender: Gender
  usCitizen: Boolean
  city: String
  postcode: String
  address1: String
  address2: String
  children: [UserChild]
  parent: UserChild
  pendingChildInvitations: [ChildInvitation]
  """
  Only for business users
  """
  organization: Organization
  treezor: TreezorUser
  kycReview: KycReview
  teams: [TeamMember]
}

type TeamMember {
  clubId: String!
  teamId: String!
  role: TeamMemberType!
  status: TeamInvitationStatus!
}

type TeamMemberDetails {
  club: ClubShort!
  team: TeamShort!
  federation: [FederationShort]
  role: TeamMemberType!
  status: TeamInvitationStatus!
}

type UserPrivate {
  id: ID!
  email: String
  firstName: String
  lastName: String
  country: String
  photo: Image
  phone: String
  phoneCountry: String
  birthDate: AWSDate
  birthCountry: String
  birthCity: String
  gender: Gender
  usCitizen: Boolean
  city: String
  postcode: String
  address1: String
  address2: String
  createDate: AWSDateTime
  parent: UserChild
  children: [UserChild]
  organization: Organization
  treezor: TreezorUser
  teams: [TeamMemberDetails]
}

type UserPublic {
  firstName: String
  lastName: String
  photo: Image
}

type UserChild {
  firstName: String
  lastName: String
  photo: Image
  phone: String
  email: String
  birthDate: String
  gender: String
  treezor: TreezorUser
}

type ChildInvitation {
  invitationId: ID!
  createDate: AWSDateTime
  user: UserChild
}

type Event {
  id: ID!
  title: String
  description: String
  image: Image
  startDate: AWSDateTime
  endDate: AWSDateTime
  address: String
  discipline: [String]
  price: Float
  likesCount: Int
  viewsCount: Int
  acceptedCount: Int
  author: Author
  repeatType: String
  target: EventTarget
  myReaction: EventReaction
  participants: UserConnection!
  organization: EventOrganization
}

type Post {
  id: ID!
  title: String
  description: String
  image: Image
  attachment: [File]
  likesCount: Int
  viewsCount: Int
  author: Author
  target: EventTarget
  myReaction: PostReaction
  createDate: AWSDateTime
  organization: EventOrganization
}

type Company {
  id: ID!
  name: String
  country: String
  legalForm: String
  legalSector: String
  regDate: AWSDate
  regNumber: String
  vatNumber: String
  goals: String
  address: Address
  addressOffice: Address
  representativeFiles: [String]
  owners: [CompanyOwner]
}

type Address {
  city: String
  postcode: String
  address1: String
  address2: String
}

type CompanyOwner {
  firstName: String
  lastName: String
  email: String!
}

type Club {
  id: ID!
  name: String
  description: String
  cover: Image
  logo: Image
  code: String
  email: String
  phone: String
  country: String
  city: String
  address: String
  discipline: [Discipline]
  teams: TeamsPrivateConnection
  coaches: UserShortConnection
  members: UserShortConnection
  friends: UserShortConnection
  upcomingEventsCount: Int
  coacheInvitationsCount: Int
  memberInvitationsCount: Int
}

type Federation {
  id: ID!
  name: String
  description: String
  cover: Image
  logo: Image
  email: String
  phone: String
  address: String
  discipline: [Discipline]
  country: String
  city: String
  clubs: ClubShortConnection
  members: UserShortConnection
}

type FederationConnection {
  items: [Federation]
  totalCount: Int
}

type ClubShortConnection {
  items: [ClubShort]
  totalCount: Int
}

type FederationShortConnection {
  items: [FederationShort]
  totalCount: Int
}

type FederationShort {
  id: ID!
  name: String
  logo: Image
}

type Team {
  id: ID!
  clubId: String
  name: String
  description: String
  cover: Image
  logo: Image
  parentTeam: Team
  children: [Team]
  address: String
  email: String
  phone: String
  discipline: Discipline
  federations: FederationShortConnection
  coaches: UserShortConnection
  members: UserShortConnection
  friends: UserShortConnection
  upcomingEventsCount: Int
  coacheInvitationsCount: Int
  memberInvitationsCount: Int
}

type TeamShort {
  id: String
  name: String
  logo: Image
}

type ClubShort {
  id: String
  name: String
  logo: Image
}

type UserShortConnection {
  items: [UserShort]
  totalCount: Int
}

type UserShort {
  id: ID!
  name: String
  logo: Image
}

type PostReaction {
  liked: Boolean
}

type EventReaction {
  liked: Boolean
  accepted: Boolean
  paid: Boolean
}

type Author {
  firstName: String
  lastName: String
  organizationName: String
  photo: Image
}

type ClubItemPrivate {
  id: ID!
  name: String
  logo: Image
}

type EventTarget {
  country: String
  federation: [FederationEventTarget]
  club: [ClubEventTarget]
  discipline: [Discipline]
  team: [TeamEventTarget]
  userRole: [UserRole]
}

input EventTargetInput {
  country: String
  federation: [String]
  club: [String]
  discipline: [Discipline]
  team: [String]
  userRole: [UserRole]
}

type FederationEventTarget {
  id: ID!
  name: String
}

type ClubEventTarget {
  id: ID!
  name: String
}

type TeamEventTarget {
  id: ID!
  name: String
}

type CardType {
  id: ID!
  name: String
  description: String
  limitMonth: Int
  limitWeek: Int
}

type Notification {
  id: ID!
  createDate: AWSDateTime
  type: NotificationType
  attributes: [KeyValue]
}

type MoneyRequest {
  id: ID!
  amount: Float!
  note: String
  status: MoneyRequestStatus
  createDate: AWSDateTime
  user: UserPublic
  fromMe: Boolean
}

type KeyValue {
  Key: String
  Value: String
}

type MyEventsConnection {
  items: [Event]
  totalCount: Int
}

type UpcomingEventsPrivateConnection {
  items: [Event]
  totalCount: Int
}

type FeedConnection {
  items: [FeedItem]
  totalCount: Int
}

type FeedPrivateConnection {
  items: [FeedItem]
  totalCount: Int
}

type TeamsPrivateConnection {
  items: [Team]
  totalCount: Int
}

type ClubsPrivateConnection {
  items: [ClubItemPrivate]
}

type UsersPrivateConnection {
  items: [UserPrivate]
  totalCount: Int
}

type UserConnection {
  items: [UserPublic]
}

type ClubsConnection {
  items: [Club]
  totalCount: Int
}

type NotificationsConnection {
  items: [Notification]
}

type MoneyRequestsConnection {
  items: [MoneyRequest]
}

type Transaction {
  id: ID!
  type: TransactionType
  amount: Float
  currency: String
  createdDate: String
  """
  | 1 | Wallet to wallet |
  | 2 | Card transaction |
  | 3 | Client fees |
  | 4 | Credit note |
  """
  transferTypeId: Int
  """
  | 3 | Check |
  | 11 | Card |
  | 14 | Oneclick card (without payment form) |
  | 21 | Sepa Direct Debit Core |
  | 23 | Full Hosted HTML Payment Form |
  | 24 | IFrame Payment Form |
  | 25 | Payment made through an SDK |
  """
  paymentMethodId: Int
  balance: Float
  notes: String
  """
  PENDING, CANCELED, VALIDATED
  """
  status: String
  isIncome: Boolean
  event: TransactionForEvent
  fromUser: UserPublic
  toUser: UserPublic
  walletDebitId: Int
  walletCreditId: Int
  payoutTypeId: Int
  bankaccountIBAN: String
}

type TransactionForEvent {
  id: String
}

type TransactionsConnection {
  items: [Transaction]
}

union FeedItem = Event | Post

type Mutation {
  signinMobile(input: SigninMobileInput!): SigninMobilePayload
  signoutMobile(input: SignoutMobileInput!): SignoutMobilePayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload!

  inviteParent(input: InviteParentInput!): InviteParentPayload
  acceptChildInvitation(input: AcceptChildInvitationInput!): AcceptChildInvitationPayload
  declineChildInvitation(input: DeclineChildInvitationInput!): DeclineChildInvitationPayload

  createEvent(input: CreateEventInput!): CreateEventPayload!
  updateEvent(input: UpdateEventInput!): UpdateEventPayload!

  createPost(input: CreatePostInput!): CreatePostPayload!
  updatePost(input: UpdatePostInput!): UpdatePostPayload!

  addLike(input: AddLikeInput!): AddLikePayload
  removeLike(input: RemoveLikeInput!): RemoveLikePayload
  acceptEvent(input: AcceptEventInput!): AcceptEventPayload
  declineEvent(input: DeclineEventInput!): DeclineEventPayload

  """
  Synchronize contacts from phone to Tifo
  """
  syncContacts(contacts: [PhoneContact]!): [Contact]!

  sendPhoneVerification(input: SendPhoneVerificationInput!): SendPhoneVerificationPayload
  verifyPhone(input: VerifyPhoneInput!): VerifyPhonePayload

  createTreezorUser(input: CreateTreezorUserInput!): CreateTreezorUserPayload!
  createTreezorCompany: CreateTreezorCompanyPayload!

  sendMoneyRequest(input: SendMoneyRequestInput!): SendMoneyRequestPayload!
  rejectMoneyRequest(input: RejectMoneyRequestInput!): RejectMoneyRequestPayload!

  createClubPrivate(input: CreateClubPrivateInput!): CreateClubPrivatePayload!
  updateClubPrivate(input: UpdateClubPrivateInput!): UpdateClubPrivatePayload!

  createTeamPrivate(input: CreateTeamPrivateInput!): CreateTeamPrivatePayload!
  updateTeamPrivate(input: UpdateTeamPrivateInput!): UpdateTeamPrivatePayload!

  sendTeamInvitation(input: SendTeamInvitationInput!): SendTeamInvitationPayload!
  acceptTeamInvitationPrivate(
    input: AcceptTeamInvitationPrivateInput!
  ): AcceptTeamInvitationPrivatePayload
  declineTeamInvitationPrivate(
    input: DeclineTeamInvitationPrivateInput!
  ): DeclineTeamInvitationPrivatePayload

  changeTeamRolePrivate(input: ChangeTeamRolePrivateInput!): ChangeTeamRolePrivatePayload
  createCompanyPrivate(input: CreateCompanyPrivateInput!): CreateCompanyPrivatePayload!
  updateCompanyPrivate(input: UpdateCompanyPrivateInput!): UpdateCompanyPrivatePayload!

  updateUserPrivate(input: UpdateUserPrivateInput!): UserPrivate!

  createFederationPrivate(input: CreateFederationPrivateInput!): CreateFederationPrivatePayload!
  updateFederationPrivate(input: UpdateFederationPrivateInput!): UpdateFederationPrivatePayload!
}

type Query {
  countries: [Country!] @aws_api_key @aws_cognito_user_pools
  languages: [Language!] @aws_api_key @aws_cognito_user_pools
  """
  Get direct link to upload user files
  """
  uploadUrl(type: UploadType!, fileName: String!, id: String): UploadUrlPayload!

  """
  Get current logged user
  """
  me: User!

  """
  Private. Lookup an Event by the id
  """
  eventPrivate(eventId: ID!): Event

  """
  Lookup an Event by the id
  """
  event(eventId: ID!): Event

  """
  Private. Lookup a Post by the id
  """
  postPrivate(eventId: ID!): Post

  """
  Lookup a Post by the id
  """
  post(eventId: ID!): Post

  """
  Search Events and Posts relevant to the user
  """
  feed(filter: FeedFilterInput, limit: Int, from: Int): FeedConnection!

  """
  Lookup an Events accepted by user
  """
  myEvents(filter: MyEventsFilterInput, limit: Int, from: Int): MyEventsConnection!

  """
  Private. List upcoming Events from my organization
  """
  upcomingEventsPrivate(limit: Int): UpcomingEventsPrivateConnection!

  """
  Private. Search Events and Posts by filter
  """
  feedPrivate(filter: FeedPrivateFilterInput, limit: Int, from: Int): FeedPrivateConnection!

  """
  Lookup a user contacts
  """
  contacts: [Contact]!
  cardTypes: [CardType]!

  team(clubId: String!, teamId: ID!): Team
  teamsPrivate(filter: TeamsPrivateFilterInput, limit: Int, from: Int): TeamsPrivateConnection!
  """
  Deprecated
  """
  clubsPrivate(filter: ClubsPrivateFilterInput, limit: Int, from: Int): ClubsPrivateConnection!
  federationsPrivate(
    filter: FederationsPrivateFilterInput
    limit: Int
    from: Int
  ): FederationConnection!
  federation(federationId: ID!): Federation

  club(clubId: ID!): Club
  clubs(filter: ClubsFilterInput, limit: Int, from: Int): ClubsConnection!
  companyPrivate: Company
  usersPrivate(filter: UsersPrivateFilterInput, limit: Int, from: Int): UsersPrivateConnection!
  userPrivate(userId: ID!): UserPrivate
  notifications(limit: Int): NotificationsConnection!
  moneyRequests(filter: MoneyRequestsFilterInput): MoneyRequestsConnection!
  transactions(filter: TransactionsFilterInput): TransactionsConnection!
}
